apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: database
  name: database-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        # Have to disable outbound ports since it's outside of cluster: https://linkerd.io/2.11/reference/proxy-configuration/
        config.linkerd.io/skip-outbound-ports: "3306"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: database
        name: database
        phase: "dev"
        version: "5a038e7" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:90c86a436b535568090ed9bdda74d4ffceb0ebf9c1b4dc087a162d62f641c7eb
        args: ["database"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNING_ENVIRONMENT"
          value: "dev"
        name: database


---
apiVersion: v1
kind: Service
metadata:
  name: database-dev-service 
  annotations:
  namespace: default
spec:
  selector:
    app: database
    phase: dev
  ports:
    - name: grpc 
      port: 50051 
      targetPort: 50051

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "0 0  * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            traffic.sidecar.istio.io/excludeOutboundIPRanges: 0.0.0.0/0
            sidecar.istio.io/inject: “false”
          labels:
            cronjob: "deleteMessages"
        spec:
          containers:
          - name: delete-messages 
            image: mariadb 
            env:
              - name: DELETEMESSAGES_PASS
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: DELETEMESSAGES_PASS
              - name: DELETEMESSAGES_USER
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: DELETEMESSAGES_USER
              - name: PASSWORDEXCHANGE_DBHOST
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: PASSWORDEXCHANGE_DBHOST
              - name: PASSWORDEXCHANGE_DBNAME
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: PASSWORDEXCHANGE_DBNAME
            imagePullPolicy: IfNotPresent
            command:
             - /bin/bash 
             - -c
             - mysql -h $PASSWORDEXCHANGE_DBHOST -u $DELETEMESSAGES_USER -p$DELETEMESSAGES_PASS  -E -e "delete from messages where created < now() - interval 7 DAY;" $PASSWORDEXCHANGE_DBNAME
          restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: email 
  name: email-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: email 
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: email 
        name: email 
        phase: "dev"
        version: "5a038e7" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:90c86a436b535568090ed9bdda74d4ffceb0ebf9c1b4dc087a162d62f641c7eb
        args: ["email"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNINGENVIRONMENT"
          value: "dev"
        name: email
        ports:
        - containerPort: 8080





---
apiVersion: v1
kind: Service
metadata:
  name: email-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: email
    phase: dev
  ports:
    - name: http
      port: 80
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: encryption
  name: encryption-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: encryption
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: encryption
        name: encryption
        phase: "dev"
        version: "5a038e7" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:90c86a436b535568090ed9bdda74d4ffceb0ebf9c1b4dc087a162d62f641c7eb
        args: ["encryption"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNING_ENVIRONMENT"
          value: "dev"
        name: encryption

---



---
apiVersion: v1
kind: Service
metadata:
  name: encryption-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: encryption 
    phase: dev
  ports:
    - name: grpc 
      port: 50051 
      targetPort: 50051

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: passwordexchange
  name: passwordexchange-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: passwordexchange
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: passwordexchange
        name: passwordexchange
        phase: "dev"
        version: "5a038e7" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:90c86a436b535568090ed9bdda74d4ffceb0ebf9c1b4dc087a162d62f641c7eb
        args: ["web"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNINGENVIRONMENT"
          value: "dev"
        name: password-exchange
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        # Health checks for API endpoints
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        # Resource limits
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"






---
apiVersion: v1
kind: Service
metadata:
  name: passwordexchange-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
    # Prometheus monitoring annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  namespace: default
spec:
  selector:
    app: passwordexchange 
    phase: dev
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 8080
      targetPort: 8080
      protocol: TCP

---
# Install RabbitMQ Cluster Operator
# kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

# RabbitMQ Cluster Instance
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmq
  namespace: default
spec:
  replicas: 3
  service:
    type: ClusterIP
  persistence:
    storageClassName: "standard-rwo"  # Use default storage class
    storage: 1Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1Gi
  rabbitmq:
    additionalConfig: |
      management.tcp.port = 15672
      management.tcp.ip = 0.0.0.0
      log.console.level = info
    envConfig: |
      RABBITMQ_DEFAULT_USER=guest
      RABBITMQ_DEFAULT_PASS=guest
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: password-exchange-reminder
  namespace: default
  labels:
    app: password-exchange
    component: reminder
spec:
  # Run daily at 9:00 AM UTC
  schedule: "*/10 * * * *"
  # Alternatively, run every 24 hours from first execution: "@every 24h"
  concurrencyPolicy: Forbid  # Don't allow overlapping jobs
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 1
  startingDeadlineSeconds: 300  # Job must start within 5 minutes of scheduled time
  jobTemplate:
    spec:
      # Clean up completed jobs after 6 hours
      ttlSecondsAfterFinished: 21600
      template:
        metadata:
          annotations:
            linkerd.io/inject: enabled
            proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
          labels:
            app: password-exchange
            component: reminder
        spec:
          restartPolicy: OnFailure
          containers:
          - name: reminder
            image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:90c86a436b535568090ed9bdda74d4ffceb0ebf9c1b4dc087a162d62f641c7eb
            imagePullPolicy: Always
            command: ["/app/app"]
            args: ["reminder", "--config=/config/config.yaml"]
            envFrom:
              - secretRef:
                  name: test-secret
            env:
            # Database configuration
            # Reminder configuration
            - name: PASSWORDEXCHANGE_REMINDER_ENABLED
              value: "true"
            - name: PASSWORDEXCHANGE_REMINDER_CHECKAFTERHOURS
              value: "24"
            - name: PASSWORDEXCHANGE_REMINDER_MAXREMINDERS
              value: "3"
            - name: PASSWORDEXCHANGE_REMINDER_INTERVAL
              value: "24"
            # Logging
            - name: PASSWORDEXCHANGE_LOGLEVEL
              value: "info"
            volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
          volumes:
          - name: config
            configMap:
              name: password-exchange-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: password-exchange-config
  namespace: default
  labels:
    app: password-exchange
data:
  config.yaml: |
    # Minimal config for reminder service
    loglevel: info
    reminder:
      enabled: true
      checkafterhours: 24
      maxreminders: 3
      reminderinterval: 24

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: slackbot
  name: slackbot-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: slackbot
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: arn:aws:iam::842805395457:role/Test_ec2ForSDK
        linkerd.io/inject: enabled
        config.linkerd.io/skip-outbound-ports: "3306"
      labels:
        app: slackbot
        name: slackbot
        phase: "dev"
        version: "5a038e7" 
    spec:
      containers:
      - image: ghcr.io/anthony-bible/passwordexchange-slackbot-dev@sha256:5ce304329b28dc772e9d19c234f53ca01f93beca263ef4fdb937ce4826f0d723
        ports:
        - containerPort: 3000
        env:
          - name: PASSWORDEXCHANGE_ENCRYPTIONSERVICE
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_ENCRYPTIONPRODSERVICE
                name: test-secret
          - name: PASSWORDEXCHANGE_DATABASESERVICE
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_DATABASEPRODSERVICE
                name: test-secret
          - name: PASSWORDEXCHANGE_HOST
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_PRODHOST
                name: test-secret
          - name: PASSWORDEXCHANGE_DBHOST
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_DBHOST
                name: test-secret
          - name: OAUTHDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_PASSWORD
                name: test-secret
          - name: OAUTHDB_USER
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_USER
                name: test-secret
          - name: OAUTHDB_NAME
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_NAME
                name: test-secret
          - name: SLACK_SIGNING_SECRET
            valueFrom:
              secretKeyRef:
                key: SLACK_SIGNING_SECRET
                name: test-secret    
          - name: SLACK_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: SLACK_CLIENT_ID
                name: test-secret  
          - name: SLACK_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: SLACK_CLIENT_SECRET
                name: test-secret        
        name: slackbot



---
apiVersion: v1
kind: Service
metadata:
  name: slackbot-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: slackbot 
  ports:
    - name: http
      port: 80 
      targetPort: 3000

