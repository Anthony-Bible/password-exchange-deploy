apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: database
  name: database-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        # Have to disable outbound ports since it's outside of cluster: https://linkerd.io/2.11/reference/proxy-configuration/
        config.linkerd.io/skip-outbound-ports: "3306"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: database
        name: database
        phase: "dev"
        version: "e894890" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:2fa485abaaf6baf5f864b9932f1f95fe9c69f83c786ff33901f73715f572d4ae
        args: ["database"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNING_ENVIRONMENT"
          value: "dev"
        name: database


---
apiVersion: v1
kind: Service
metadata:
  name: database-dev-service 
  annotations:
  namespace: default
spec:
  selector:
    app: database
    phase: dev
  ports:
    - name: grpc 
      port: 50051 
      targetPort: 50051

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "0 0  * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            traffic.sidecar.istio.io/excludeOutboundIPRanges: 0.0.0.0/0
            sidecar.istio.io/inject: “false”
          labels:
            cronjob: "deleteMessages"
        spec:
          containers:
          - name: delete-messages 
            image: mariadb 
            env:
              - name: DELETEMESSAGES_PASS
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: DELETEMESSAGES_PASS
              - name: DELETEMESSAGES_USER
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: DELETEMESSAGES_USER
              - name: PASSWORDEXCHANGE_DBHOST
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: PASSWORDEXCHANGE_DBHOST
              - name: PASSWORDEXCHANGE_DBNAME
                valueFrom: 
                  secretKeyRef:
                   name: test-secret
                   key: PASSWORDEXCHANGE_DBNAME
            imagePullPolicy: IfNotPresent
            command:
             - /bin/bash 
             - -c
             - mysql -h $PASSWORDEXCHANGE_DBHOST -u $DELETEMESSAGES_USER -p$DELETEMESSAGES_PASS  -E -e "delete from messages where created < now() - interval 7 DAY;" $PASSWORDEXCHANGE_DBNAME
          restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: email 
  name: email-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: email 
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: email 
        name: email 
        phase: "dev"
        version: "e894890" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:2fa485abaaf6baf5f864b9932f1f95fe9c69f83c786ff33901f73715f572d4ae
        args: ["email"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNINGENVIRONMENT"
          value: "dev"
        name: email
        ports:
        - containerPort: 8080





---
apiVersion: v1
kind: Service
metadata:
  name: email-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: email
    phase: dev
  ports:
    - name: http
      port: 80
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: encryption
  name: encryption-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: encryption
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: encryption
        name: encryption
        phase: "dev"
        version: "e894890" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:2fa485abaaf6baf5f864b9932f1f95fe9c69f83c786ff33901f73715f572d4ae
        args: ["encryption"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNING_ENVIRONMENT"
          value: "dev"
        name: encryption

---



---
apiVersion: v1
kind: Service
metadata:
  name: encryption-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: encryption 
    phase: dev
  ports:
    - name: grpc 
      port: 50051 
      targetPort: 50051

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: passwordexchange
  name: passwordexchange-dev-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: passwordexchange
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: passwordexchange
        name: passwordexchange
        phase: "dev"
        version: "e894890" 
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: test-secret
        image: ghcr.io/anthony-bible/passwordexchange-container-dev@sha256:2fa485abaaf6baf5f864b9932f1f95fe9c69f83c786ff33901f73715f572d4ae
        args: ["web"]
        env:
        - name: "PASSWORDEXCHANGE_RUNNINGENVIRONMENT"
          value: "dev"
        name: password-exchange
        ports:
        - containerPort: 8080






---
apiVersion: v1
kind: Service
metadata:
  name: passwordexchange-dev-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: passwordexchange 
    phase: dev
  ports:
    - name: http
      port: 80
      targetPort: 8080

---
# Install RabbitMQ Cluster Operator
# kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

# RabbitMQ Cluster Instance
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmq
  namespace: default
spec:
  replicas: 3
  service:
    type: ClusterIP
  persistence:
    storageClassName: "hcloud-volumes"  # Use default storage class
    storage: 1Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1Gi
  rabbitmq:
    additionalConfig: |
      management.tcp.port = 15672
      management.tcp.ip = 0.0.0.0
      log.console.level = info
    envConfig: |
      RABBITMQ_DEFAULT_USER=guest
      RABBITMQ_DEFAULT_PASS=guest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: slackbot
  name: slackbot-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: slackbot
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: arn:aws:iam::842805395457:role/Test_ec2ForSDK
        linkerd.io/inject: enabled
        config.linkerd.io/skip-outbound-ports: "3306"
      labels:
        app: slackbot
        name: slackbot
        phase: "dev"
        version: "e894890" 
    spec:
      containers:
      - image: ghcr.io/anthony-bible/passwordexchange-slackbot-dev@sha256:207fa644445afc915869c0e833f88f0056d3dd6ed2008887d48b829f512e1c4e
        ports:
        - containerPort: 3000
        env:
          - name: PASSWORDEXCHANGE_ENCRYPTIONSERVICE
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_ENCRYPTIONPRODSERVICE
                name: test-secret
          - name: PASSWORDEXCHANGE_DATABASESERVICE
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_DATABASEPRODSERVICE
                name: test-secret
          - name: PASSWORDEXCHANGE_HOST
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_PRODHOST
                name: test-secret
          - name: PASSWORDEXCHANGE_DBHOST
            valueFrom:
              secretKeyRef:
                key: PASSWORDEXCHANGE_DBHOST
                name: test-secret
          - name: OAUTHDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_PASSWORD
                name: test-secret
          - name: OAUTHDB_USER
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_USER
                name: test-secret
          - name: OAUTHDB_NAME
            valueFrom:
              secretKeyRef:
                key: OAUTHDB_NAME
                name: test-secret
          - name: SLACK_SIGNING_SECRET
            valueFrom:
              secretKeyRef:
                key: SLACK_SIGNING_SECRET
                name: test-secret    
          - name: SLACK_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: SLACK_CLIENT_ID
                name: test-secret  
          - name: SLACK_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: SLACK_CLIENT_SECRET
                name: test-secret        
        name: slackbot



---
apiVersion: v1
kind: Service
metadata:
  name: slackbot-service 
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: anthony.bible
  namespace: default
spec:
  selector:
    app: slackbot 
  ports:
    - name: http
      port: 80 
      targetPort: 3000

